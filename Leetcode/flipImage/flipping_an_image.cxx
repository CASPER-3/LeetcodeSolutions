/* 

给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。

水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。

反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。

示例 1:

输入: [[1,1,0],[1,0,1],[0,0,0]]
输出: [[1,0,0],[0,1,0],[1,1,1]]
解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
示例 2:

输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
说明:

1 <= A.length = A[0].length <= 20
0 <= A[i][j] <= 1
通过次数46,436提交次数60,640

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/flipping-an-image
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

 */

#include <vector>
#include <algorithm>
using std::reverse;
using std::vector;
class flipping_an_image
{
private:
     /* data */
public:
     flipping_an_image(/* args */);
     ~flipping_an_image();
     vector<vector<int>> flipAndInvertImage(vector<vector<int>> &A)
     {
          for (auto &vec : A)
          {
               reverse(vec.begin(), vec.end());
               for (auto &i : vec)
               {
                    i = i ? 0 : 1;
               }
          }
          return A;
     }
};

flipping_an_image::flipping_an_image(/* args */)
{
}

flipping_an_image::~flipping_an_image()
{
}

/* 

输入: [[1,1,0],[1,0,1],[0,0,0]]
输出: [[1,0,0],[0,1,0],[1,1,1]]
解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]

     1    1    0         
     1    0    1
     0    0    0

 */
// 懒得做脑筋急转弯了,就直接标准库一把梭吧.
// Wed,Feb24,2021
// 08:46:02:671:637497531626715488